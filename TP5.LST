################################################################################
#                                                                              #
#    Micro Series 6801 Assembler V2.00/DOS              04/Jun/21  19:11:00    #
#                                                                              #
#       Source   =   tp5.msa                                                   #
#       List     =   tp5.lst                                                   #
#       Object   =   tp5.r07                                                   #
#       Options  =                                                             #
#                                                                              #
#                                               (c) Copyright IAR Systems 1990 #
################################################################################


    1  0000                   p68h11
    2                 
    3  1007           DDRC    equ     $1007   ;data direction register for C
    4  1002           PIOC    equ     $1002   ;for strobe B assertion change
    5  1005           PORTCL  equ     $1005   ;port C latched
    6  1004           PORTB   equ     $1004   ;port B
    7                 
    8                 
    9                 
   10  0000           LEFT    EQU     0               <- [display] <- texto
   11  0001           RIGHT   EQU     1               texto -> [display] ->
   12                 
   13  0000           SENTIDO EQU     LEFT            colocar el sentido en el que aparece el texto
   14                 
   15                 
   16                 *************************************************
   17                 *                                               *
   18                 *               M A I N                         *
   19                 *                                               *
   20                 *************************************************
   21                 
   22  2000                   ORG     $2000
   23  2000           main    EQU     *
   24  2000 8E3031            lds     #stk_ini
   25                 
   26  2003 BD20FF            jsr     initdis         ;inicio el display
   27                 
   28  2006 18CE0100          ldy     #lcd_str        ;cargo en Y la dirección de la variable global para el display
   29                 *                               ;esta direccion se mantiene durante el resto del codigo porque                  
   30                 *                               ;es usada por las subrutinas que trabajan con la cadena
   31                 
   32  200A BD2086            jsr     clear           ;borro el display e inicio la cadena lcd_str vacía
   33                 
   34  200D CE0104    loop    ldx     #mensaje        ;cargo la primera posición del mensaje a mostrar
   35  2010 BD20C8            jsr     strlen          ;chequeo que la cadena tenga terminador nulo y guardo en B su tamaño
   36  2013 2915              bvs     fin             ;si no tiene, salgo para evitar algún error 
   37                 
   38                         IF      SENTIDO=RIGHT   
   39                 
   40                         abx                     apunto X al terminador de la cadena
   41                         dex                     apunto X al último caracter de la cadena
   42                 subloop equ     *
   43                         ldaa    0,x             leo el caracter actual
   44                         jsr     push_L          agrego un caracter por izquierda del array para correr todo
   45                 *                               hacia la derecha
   46                         jsr     println         actualizo el display
   47                         jsr     delay           delay 0.5 ~ 1 seg
   48                 
   49                         dex                     voy al caracter anterior
   50                         decb                    decremento la cantidad de ciclos restantes
   51                         bne     subloop         si la cantidad de ciclos restantes no es cero, repito
   52                 
   53                 endstr  EQU     *               salgo del loop
   54                         jsr     clrdisr         efecto de borrar el display hacia la derecha
   55                         bra     loop            repito indefinidamente
   56                         
   57  2015                   ENDIF
   58  2015                   IF      SENTIDO=LEFT
   59                 
   60  2015           subloop equ     *
   61  2015 A600              ldaa    0,x             leo el caracter actual
   62  2017 270C              beq     endstr          si es el terminador, salgo
   63  2019 BD202C            jsr     push_R          pusheo el caracter por derecha del array para correr
   64                 *                               todo hacia la izquierda
   65  201C BD206C            jsr     println         actualizo el display
   66  201F BD20DB            jsr     delay           delay
   67                 
   68  2022 08                inx                     voy al siguiente caracter
   69  2023 20F0              bra     subloop         repito
   70                 
   71  2025           endstr  EQU     *               fin de la cadena
   72  2025 BD209E            jsr     clrdisl         efecto de borrar el display hacia la izquierda
   73  2028 20E3              bra     loop            repito indefinidamente
   74                 
   75  202A                   ENDIF
   76                 
   77                 
   78  202A 20FE      fin     bra     fin
   79                 
   80                 
   81                 
   82                 *********************************************************
   83                 *               PUSH FROM RIGHT                         *
   84                 * agrega un byte por la derecha de un vector de         *
   85                 * longitud 4, desplazandolo todos sus elementos hacia   *
   86                 * la izquierda                                          *
   87                 * Params:                                               *
   88                 *       - [AccIY]: puntero al vector                    *
   89                 *       - [AccA]: byte a agregar.                       *
   90                 * Nota: No devuelve valores, no es necesario liberar el *
   91                 *       stack luego de invocarla                        *
   92                 *********************************************************
   93                 * [A] 0 <- (X) [FP]
   94                 * [XH]
   95                 * [XL]
   96                 * [PCH]
   97                 * [PCL]
   98  202C           push_R  EQU     *
   99  202C 3C                pshx            ;backup de X
  100  202D 36                psha            ;guardo el valor de A (byte a cargar)
  101  202E 30                tsx
  102  202F 183C              pshy            ;backup de Y (posición de memoria del vector)
  103  2031 37                pshb            ;backup de B
  104                 
  105  2032 C603              ldab    #3      ;cargo la cantidad de repeticiones del ciclo
  106                 
  107  2034 18A601    L01     ldaa    1,y     ;copio el valor siguiente
  108  2037 18A700            staa    0,y     ;y lo desplazo hacia la izquierda (posición anterior)
  109  203A 1808              iny             ;voy a la sig. posición
  110  203C 5A                decb            ;decremento la cantidad de ciclos restantes
  111  203D 26F5              bne     L01     ;si no son cero, repito
  112                 
  113                 
  114  203F A600              ldaa    0,x     ;leo el byte del input que debo pushear
  115  2041 18A700            staa    0,y     ;lo escribo en la última posición
  116                 
  117  2044 33                pulb            ;recupero todos los backups
  118  2045 1838              puly
  119  2047 32                pula
  120  2048 38                pulx
  121  2049 39                rts
  122                 
  123                 
  124                 *********************************************************
  125                 *               PUSH FROM LEFT                          *
  126                 * agrega un byte por la izquierda de un vector de       *
  127                 * longitud 4, moviendo todos los elementos a la derecha *
  128                 * Params:                                               *
  129                 *       - [AccA]: byte a agregar.                       *
  130                 *       - [AccIY]: puntero al vector                    *
  131                 * Nota: No devuelve valores, no es necesario liberar el *
  132                 *       stack luego de invocarla                        *
  133                 *********************************************************
  134                 * [A] 0 <- (X)
  135                 * [XH]
  136                 * [XL]
  137                 * [PCH]
  138                 * [PCL]
  139  204A           push_L  EQU     *
  140  204A 3C                pshx            ;backup de X
  141  204B 36                psha            ;guardo el valor de A (byte a cargar)
  142  204C 30                tsx
  143  204D 183C              pshy            ;backup de Y
  144  204F 37                pshb            ;backup de B
  145                 
  146  2050 C603              ldab    #3      ;cargo la cantidad de repeticiones del ciclo
  147  2052 183A              aby             agrego el desfase
  148  2054 1809              dey             resto 1 (porque necesito posicionarme en la posición anterior, no en la última)
  149                 
  150  2056 18A600    L03     ldaa    0,y     ;copio el valor de la posición actual
  151  2059 18A701            staa    1,y     ;y lo guardo en la posición siguiente (a la derecha)
  152  205C 1809              dey             ;voy a la posición izquierda (anterior)
  153  205E 5A                decb            ;decremento la cantidad de ciclos restantes
  154  205F 26F5              bne     L03     ;si no son cero, repito
  155                 
  156                 
  157  2061 A600              ldaa    0,x     ;leo el byte del input que debo pushear
  158  2063 18A701            staa    1,y     ;lo escribo en la primera posición
  159                 
  160  2066 33                pulb            ;recupero todos los backups
  161  2067 1838              puly
  162  2069 32                pula
  163  206A 38                pulx
  164  206B 39                rts
  165                 
  166                 
  167                 *************************************************************************
  168                 *               println (PRINT LINE)                                    *
  169                 * Descripción:                                                          *
  170                 *       Imprime 4 caracteres en el display en una sola                  *
  171                 * subrutina, utilizando un arreglo de 4 bytes (caracteres) en memoria   *
  172                 * como input para el display                                            *
  173                 *                                                                       *
  174                 * Params:                                                               *
  175                 *       - [AccY]: Pos. de memoria de la cadena que                      *
  176                 *               desea imprimir                                          *
  177                 *                                                                       *
  178                 * Nota: no devuelve valores, deja el AccY como estaba                   *
  179                 *       antes de ejecutar la subrutina                                  *
  180                 *************************************************************************
  181                 * [XH] 0 <- (X)
  182                 * [XL] 1
  183                 * [PCH] 2
  184                 * [PCL] 3
  185                 
  186  206C           println equ     *
  187  206C 183C              pshy            backup Y
  188  206E 36                psha            backup A
  189  206F 37                pshb            backup B
  190                 
  191  2070 C604              ldab    #4      ;inicio B en 4
  192  2072           repite  equ     *
  193  2072 5A                decb
  194  2073 18A600            ldaa    0,y     ;leo el caracter en cuestion
  195  2076 F71005            stab    PORTCL  ;set the position 0-3
  196  2079 B71004            staa    PORTB   ;set the character
  197  207C 1808              iny
  198                 
  199  207E 5D                tstb
  200  207F 26F1              bne     repite
  201                 
  202  2081 33                pulb            recupero backup B
  203  2082 32                pula            recupero backup A
  204  2083 1838              puly            recupero backup Y
  205  2085 39                rts
  206                 
  207                 
  208                 
  209                 *********************************************************
  210                 *               CLEAR                                   *
  211                 * Descripción:                                          *
  212                 *       Borra el contenido del display y del vector     *
  213                 *       usado como variable global del display          *
  214                 *                                                       *
  215                 * Params:                                               *
  216                 *       - [AccIY]: puntero al vector del display        *
  217                 *                                                       *
  218                 * Nota: no devuelve valores ni recibe parámetros        *
  219                 *********************************************************
  220  2086           clear   equ     *
  221  2086 36                psha                    backup de A
  222  2087 37                pshb                    backup de B
  223  2088 183C              pshy                    backup de Y
  224                 
  225  208A C603              ldab    #3              cantidad de ciclos menos 1 (para usarlo como index)
  226  208C 8620      L05     ldaa    #' '            cargo un espacio
  227  208E BD20F8            jsr     outchar         lo escribo en el display
  228  2091 186F00            clr     0,y             borro un elemento del array del display
  229  2094 1808              iny                     apunto al siguiente elemento del array
  230  2096 5A                decb                    decremento el indice
  231  2097 2AF3              bpl     L05             si es positivo, repito (hasta el cero)
  232                 
  233  2099 1838              puly                    recupero los backups
  234  209B 33                pulb                    
  235  209C 32                pula
  236  209D 39                rts                     retorno de la subrutina
  237                 
  238                 
  239                 *********************************************************
  240                 *                       clrdisl                         *
  241                 *               (EFECTO CLEAR DISPLAY LEFT)             *
  242                 * borra el display desplazando el texto hacia la izq    *
  243                 * [AccY]: debe mantenerse la posición de la cadena aquí *
  244                 *********************************************************
  245  209E           clrdisl equ     *
  246  209E 37                pshb                    hago backup de B
  247  209F 36                psha                    hago backup de A
  248                 
  249  20A0 C604              ldab    #4              repeticiones del contador
  250  20A2           L02     equ     *
  251  20A2 8620              ldaa    #' '            cargo un caracter tipo espacio vacío
  252  20A4 BD202C            jsr     push_R          lo agrego al vector por derecha
  253  20A7 BD206C            jsr     println         actualizo el display
  254  20AA BD20DB            jsr     delay           delay
  255  20AD 5A                decb                    decremento la cantidad de ciclos restantes
  256  20AE 26F2              bne     L02
  257                 
  258  20B0 32                pula                    recupero backup de A
  259  20B1 33                pulb                    recupero backup de B
  260  20B2 39                rts
  261                 
  262                 
  263                 *********************************************************
  264                 *                       clrdisr                         *
  265                 *               (EFECTO CLEAR DISPLAY RIGHT)            *
  266                 * borra el display desplazando el texto hacia la der    *
  267                 * [AccY]: debe mantenerse la posición de la cadena aquí *
  268                 *********************************************************
  269  20B3           clrdisr equ     *
  270  20B3 37                pshb                    hago backup de B
  271  20B4 36                psha                    hago backup de A
  272                 
  273  20B5 C604              ldab    #4              repeticiones del contador
  274  20B7           L04     equ     *
  275  20B7 8620              ldaa    #' '            cargo un caracter tipo espacio vacío
  276  20B9 BD204A            jsr     push_L          lo agrego al vector por izquierda
  277  20BC BD206C            jsr     println         actualizo el display
  278  20BF BD20DB            jsr     delay           delay
  279  20C2 5A                decb                    decremento la cantidad de ciclos restantes
  280  20C3 26F2              bne     L04
  281                 
  282  20C5 32                pula                    recupero backup de A
  283  20C6 33                pulb                    recupero backup de B
  284  20C7 39                rts
  285                 
  286                 
  287                 *********************************************************
  288                 *               SUBRUTINA STRLEN                        *
  289                 * Esta subrutina devuelve por el [registro B], el largo *
  290                 * de una cadena de texto con terminador nulo, cuya      *
  291                 * dirección de memoria es pasada como parámetro         *
  292                 * por el [registro X]                                   *
  293                 *                                                       *
  294                 * Input:  [AccIX]: dirección de memoria de la cadena    *
  295                 * Output: [AccB]: largo de la cadena sin contar el term *
  296                 *                                                       *
  297                 * Nota: El máximo de la cadena es de 255 con el         *
  298                 *       terminador, si la cadena no presenta terminador *
  299                 *       nulo, devuelve el overflow en 1                 *
  300                 *********************************************************
  301  20C8           strlen  EQU     *
  302  20C8 36                psha                    backup de A
  303  20C9 3C                pshx                    backup de X
  304                         
  305  20CA C6FF              ldab    #$FF            Cargo las repeticiones del contador en B
  306                 
  307  20CC A600      busca   ldaa    0,x             Leo el caracter actual
  308  20CE 2707              beq     found           Si es cero, significa que es el terminador nulo
  309  20D0 08                inx                     Si no es, voy a la siguiente posición de la cadena
  310  20D1 5A                decb                    Decremento el contador de cantidad de repeticiones
  311  20D2 26F8              bne     busca           Si no es cero, repite la búsqueda del caracter NULL
  312                 
  313  20D4 0B                sev                     si no encontré el terminador, seteo el overflow en 1
  314  20D5 2002              bra     return          salgo
  315                 
  316  20D7 53        found   comb                    Invierto el valor de B para obtener la cantidad de caracteres contados
  317                 *                               ('comb' devuelve overflow en 0 siempre)
  318                 
  319  20D8 38                pulx                    recupero backup de X
  320  20D9 32        return  pula                    recupero backup de B
  321  20DA 39                rts
  322                 
  323                 
  324                 
  325                 *********************************************************
  326                 *               SUBRUTINA delay                         *
  327                 *                                                       *
  328                 * Esta subrutina genera un delay de aprox 0.5 - 1s para *
  329                 * simluador del wookie                                  *
  330                 * No recibe ningún parámetro ni retorna valores, no     *
  331                 * hace falta liberar el stack depués de invocarla       *
  332                 *********************************************************
  333                 
  334  20DB           delay   equ     *
  335  20DB 3C                pshx                    Hago backup de los registros    (4 ciclos)
  336  20DC 183C              pshy                                                    (5 ciclos)
  337  20DE 36                psha                                                    (3 ciclos)
  338  20DF 37                pshb                                                    (3 ciclos)
  339  20E0 8617              ldaa    #23             Cargo la cantidad de repeticiones que haré con el loop1. (23 ciclos)
  340                 *                                                               [TOTAL:17]
  341                 
  342                 *       [LOOP1]: n recorridos del loop1 lleva n*(9+T) ciclos, siendo T los ciclos en total del loop2. 
  343  20E2 18CED900  loop1   ldy     #$D900          Cargo la cantidad de repeticiones que haré con el loop2. (4 ciclos)
  344                 
  345                 *       [LOOP2]: Un solo recorrido del loop2 lleva 9 ciclos, 55552 ($D900) recorridos del loop2 lleva 499968 ciclos
  346  20E6 01        loop2   nop                     retardo                 (2 ciclos)
  347  20E7 1809              dey                     decremento Y            (4 ciclos)
  348  20E9 26FB              bne     loop2           salto si no es cero     (3 ciclos)
  349                 *                                                       [TOTAL:9]
  350                 
  351  20EB 4A                deca                    decremento A    (2 ciclos)
  352  20EC 26F4              bne     loop1           si A!=0, repito (3 ciclos)
  353                 
  354                 
  355  20EE 18CE0012          ldy     #$12            Retardo                         (5 ciclos)
  356  20F2 33                pulb                    Recupero el valor               (4 ciclos)
  357  20F3 32                pula                    de los  registros               (4 ciclos)
  358  20F4 1838              puly                                                    (6 ciclos)
  359  20F6 38                pulx                                                    (5 ciclos)
  360  20F7 39                rts                     Retorno de la rubrutina         (5 ciclos)
  361                 *                                                               [TOTAL:29]
  362                 
  363                 
  364                 *****************************************
  365                 *       outchar                         *
  366                 * ACCA: Carácter a enviar               *
  367                 * ACCB: Posición        (0-3)           *
  368                 *****************************************
  369  20F8           outchar equ     *
  370  20F8 F71005            stab    PORTCL  ;set the position
  371  20FB B71004            staa    PORTB   ;set the character
  372  20FE 39                rts
  373                 
  374                 *****************************************
  375                 *       initdis                         *
  376                 * Inicia el display                     *
  377                 *****************************************
  378                 
  379  20FF           initdis equ     *
  380  20FF 36                psha
  381  2100 86FF              ldaa    #$FF    ;set for output
  382  2102 B71007            staa    DDRC    ;C output
  383  2105 B61002            ldaa    PIOC    ;get current value
  384  2108 84FE              anda    #$FE    ;reset bit 0 to 0
  385  210A B71002            staa    PIOC    ;send it out
  386  210D 32                pula
  387  210E 39                rts
  388                 
  389                 
  390                 
  391                 *********************************************************
  392                 *                                                       *
  393                 *       VARIABLES Y CONSTANTES GLOBALES DE MEMORIA      *
  394                 *                                                       *
  395                 *********************************************************
  396                 
  397  0100                   ORG     $0100
  398  0100           lcd_str RMB     4       ;reservo espacio para el vector usado por el display como VARIABLE GLOBAL
  399                 
  400                 
  401  0104 4255454E  mensaje FCC     'BUEN DIA'      ;mensaje a mostrar
       0108 20444941
  402  010C 00                FCB     0               ;coloco el terminador nulo
  403                 
  404                 
  405                 *****************************************
  406                 *       STACK DATA                      *
  407                 *****************************************
  408                 
  409  3000                   ORG     $3000
  410  3000           stack   RMB     50
  411  3031           stk_ini EQU     *-1
  412                 
  413                 
  414                 
  415  3032                   END

    Errors:  None           #######
    Bytes:   280            # tp5 #
    CRC:     D7D7           #######

