	p68h11

DDRC	equ	$1007	;data direction register for C
PIOC	equ	$1002	;for strobe B assertion change
PORTCL	equ	$1005	;port C latched
PORTB	equ	$1004	;port B



LEFT	EQU	0		<- [display] <- texto
RIGHT	EQU	1		texto -> [display] ->

SENTIDO	EQU	LEFT		colocar el sentido en el que aparece el texto


*************************************************
*						*
*		M A I N				*
*						*
*************************************************

	ORG	$2000
main	EQU	*
	lds	#stk_ini

	jsr 	initdis		;inicio el display

	ldy	#lcd_str	;cargo en Y la dirección de la variable global para el display
*				;esta direccion se mantiene durante el resto del codigo porque			
*				;es usada por las subrutinas que trabajan con la cadena

	jsr	clear		;borro el display e inicio la cadena lcd_str vacía

loop	ldx	#mensaje	;cargo la primera posición del mensaje a mostrar
	jsr	strlen		;chequeo que la cadena tenga terminador nulo y guardo en B su tamaño
	bvs	fin		;si no tiene, salgo para evitar algún error 

	IF	SENTIDO=RIGHT	

	abx			apunto X al terminador de la cadena
	dex			apunto X al último caracter de la cadena
subloop	equ	*
	ldaa	0,x		leo el caracter actual
	jsr	push_L		agrego un caracter por izquierda del array para correr todo
*				hacia la derecha
	jsr	println		actualizo el display
	jsr	delay		delay 0.5 ~ 1 seg

	dex			voy al caracter anterior
	decb			decremento la cantidad de ciclos restantes
	bne	subloop		si la cantidad de ciclos restantes no es cero, repito

endstr	EQU	*		salgo del loop
	jsr	clrdisr		efecto de borrar el display hacia la derecha
	bra	loop		repito indefinidamente
	
	ENDIF
	IF	SENTIDO=LEFT

subloop	equ	*
	ldaa	0,x		leo el caracter actual
	beq	endstr		si es el terminador, salgo
	jsr	push_R		pusheo el caracter por derecha del array para correr
*				todo hacia la izquierda
	jsr	println		actualizo el display
	jsr	delay		delay

	inx			voy al siguiente caracter
	bra	subloop		repito

endstr	EQU	*		fin de la cadena
	jsr	clrdisl		efecto de borrar el display hacia la izquierda
	bra	loop		repito indefinidamente

	ENDIF


fin	bra	fin



*********************************************************
*		PUSH FROM RIGHT				*
* agrega un byte por la derecha de un vector de 	*
* longitud 4, desplazandolo todos sus elementos hacia 	*
* la izquierda						*
* Params: 						*
*	- [AccIY]: puntero al vector			*
* 	- [AccA]: byte a agregar.			*
* Nota: No devuelve valores, no es necesario liberar el *
* 	stack luego de invocarla			*
*********************************************************
* [A] 0 <- (X) [FP]
* [XH]
* [XL]
* [PCH]
* [PCL]
push_R	EQU	*
	pshx		;backup de X
	psha		;guardo el valor de A (byte a cargar)
	tsx
	pshy		;backup de Y (posición de memoria del vector)
	pshb		;backup de B

	ldab	#3	;cargo la cantidad de repeticiones del ciclo

L01	ldaa	1,y	;copio el valor siguiente
	staa	0,y	;y lo desplazo hacia la izquierda (posición anterior)
	iny		;voy a la sig. posición
	decb		;decremento la cantidad de ciclos restantes
	bne	L01	;si no son cero, repito


	ldaa	0,x	;leo el byte del input que debo pushear
	staa	0,y	;lo escribo en la última posición

	pulb		;recupero todos los backups
	puly
	pula
	pulx
	rts


*********************************************************
*		PUSH FROM LEFT				*
* agrega un byte por la izquierda de un vector de 	*
* longitud 4, moviendo todos los elementos a la derecha	*
* Params: 						*
* 	- [AccA]: byte a agregar.			*
*	- [AccIY]: puntero al vector			*
* Nota: No devuelve valores, no es necesario liberar el *
* 	stack luego de invocarla			*
*********************************************************
* [A] 0 <- (X)
* [XH]
* [XL]
* [PCH]
* [PCL]
push_L	EQU	*
	pshx		;backup de X
	psha		;guardo el valor de A (byte a cargar)
	tsx
	pshy		;backup de Y
	pshb		;backup de B

	ldab	#3	;cargo la cantidad de repeticiones del ciclo
	aby		agrego el desfase
	dey		resto 1 (porque necesito posicionarme en la posición anterior, no en la última)

L03	ldaa	0,y	;copio el valor de la posición actual
	staa	1,y	;y lo guardo en la posición siguiente (a la derecha)
	dey		;voy a la posición izquierda (anterior)
	decb		;decremento la cantidad de ciclos restantes
	bne	L03	;si no son cero, repito


	ldaa	0,x	;leo el byte del input que debo pushear
	staa	1,y	;lo escribo en la primera posición

	pulb		;recupero todos los backups
	puly
	pula
	pulx
	rts


*************************************************************************
*		println	(PRINT LINE)					*
* Descripción:								*
*	Imprime 4 caracteres en el display en una sola			*
* subrutina, utilizando un arreglo de 4 bytes (caracteres) en memoria	*
* como input para el display						*
*									*
* Params:								*
* 	- [AccY]: Pos. de memoria de la cadena que			*
*		desea imprimir						*
* 									*
* Nota: no devuelve valores, deja el AccY como estaba			*
*	antes de ejecutar la subrutina					*
*************************************************************************
* [XH] 0 <- (X)
* [XL] 1
* [PCH] 2
* [PCL] 3

println	equ	*
	pshy		backup Y
	psha		backup A
	pshb		backup B

	ldab	#4	;inicio B en 4
repite	equ	*
	decb
	ldaa	0,y	;leo el caracter en cuestion
	stab	PORTCL	;set the position 0-3
	staa	PORTB	;set the character
	iny

	tstb
	bne	repite

	pulb		recupero backup B
	pula		recupero backup A
	puly		recupero backup Y
	rts



*********************************************************
*		CLEAR					*
* Descripción:						*
*	Borra el contenido del display y del vector	*
*	usado como variable global del display		*
*							*
* Params: 						*
*	- [AccIY]: puntero al vector del display	*
* 							*
* Nota: no devuelve valores ni recibe parámetros 	*
*********************************************************
clear	equ	*
	psha			backup de A
	pshb			backup de B
	pshy			backup de Y

	ldab	#3		cantidad de ciclos menos 1 (para usarlo como index)
L05	ldaa	#' '		cargo un espacio
	jsr 	outchar		lo escribo en el display
	clr	0,y		borro un elemento del array del display
	iny			apunto al siguiente elemento del array
	decb			decremento el indice
	bpl	L05		si es positivo, repito (hasta el cero)

	puly			recupero los backups
	pulb			
	pula
	rts			retorno de la subrutina


*********************************************************
*			clrdisl				*
*		(EFECTO CLEAR DISPLAY LEFT)		*
* borra el display desplazando el texto hacia la izq	*
* [AccY]: debe mantenerse la posición de la cadena aquí	*
*********************************************************
clrdisl	equ	*
	pshb			hago backup de B
	psha			hago backup de A

	ldab	#4		repeticiones del contador
L02	equ	*
	ldaa	#' '		cargo un caracter tipo espacio vacío
	jsr	push_R		lo agrego al vector por derecha
	jsr	println		actualizo el display
	jsr	delay		delay
	decb			decremento la cantidad de ciclos restantes
	bne	L02

	pula			recupero backup	de A
	pulb			recupero backup	de B
	rts


*********************************************************
*			clrdisr				*
*		(EFECTO CLEAR DISPLAY RIGHT)		*
* borra el display desplazando el texto hacia la der	*
* [AccY]: debe mantenerse la posición de la cadena aquí	*
*********************************************************
clrdisr	equ	*
	pshb			hago backup de B
	psha			hago backup de A

	ldab	#4		repeticiones del contador
L04	equ	*
	ldaa	#' '		cargo un caracter tipo espacio vacío
	jsr	push_L		lo agrego al vector por izquierda
	jsr	println		actualizo el display
	jsr	delay		delay
	decb			decremento la cantidad de ciclos restantes
	bne	L04

	pula			recupero backup	de A
	pulb			recupero backup	de B
	rts


*********************************************************
*		SUBRUTINA STRLEN			*
* Esta subrutina devuelve por el [registro B], el largo	*
* de una cadena de texto con terminador nulo, cuya 	*
* dirección de memoria es pasada como parámetro		*
* por el [registro X]					*
*							*
* Input:  [AccIX]: dirección de memoria de la cadena	*
* Output: [AccB]: largo de la cadena sin contar el term *
*							*
* Nota: El máximo de la cadena es de 255 con el		*
*	terminador, si la cadena no presenta terminador	*
*	nulo, devuelve el overflow en 1			*
*********************************************************
strlen	EQU	*
	psha			backup de A
	pshx			backup de X
	
	ldab	#$FF		Cargo las repeticiones del contador en B

busca	ldaa	0,x		Leo el caracter actual
	beq	found		Si es cero, significa que es el terminador nulo
	inx			Si no es, voy a la siguiente posición de la cadena
	decb			Decremento el contador de cantidad de repeticiones
	bne	busca		Si no es cero, repite la búsqueda del caracter NULL

	sev			si no encontré el terminador, seteo el overflow en 1
	bra	return		salgo

found	comb			Invierto el valor de B para obtener la cantidad de caracteres contados
*				('comb' devuelve overflow en 0 siempre)

	pulx			recupero backup de X
return	pula			recupero backup de B
 	rts



*********************************************************
*		SUBRUTINA delay				*
*							*
* Esta subrutina genera un delay de aprox 0.5 - 1s para	*
* simluador del wookie					*
* No recibe ningún parámetro ni retorna valores, no 	*
* hace falta liberar el stack depués de invocarla	*
*********************************************************

delay	equ	*
	pshx			Hago backup de los registros	(4 ciclos)
	pshy							(5 ciclos)
	psha							(3 ciclos)
	pshb							(3 ciclos)
	ldaa	#23		Cargo la cantidad de repeticiones que haré con el loop1. (23 ciclos)
*								[TOTAL:17]

*	[LOOP1]: n recorridos del loop1 lleva n*(9+T) ciclos, siendo T los ciclos en total del loop2. 
loop1	ldy	#$D900		Cargo la cantidad de repeticiones que haré con el loop2. (4 ciclos)

* 	[LOOP2]: Un solo recorrido del loop2 lleva 9 ciclos, 55552 ($D900) recorridos del loop2 lleva 499968 ciclos
loop2	nop			retardo 		(2 ciclos)
	dey			decremento Y 		(4 ciclos)
	bne	loop2		salto si no es cero 	(3 ciclos)
*							[TOTAL:9]

	deca			decremento A	(2 ciclos)
	bne	loop1		si A!=0, repito (3 ciclos)


	ldy	#$12		Retardo 			(5 ciclos)
	pulb			Recupero el valor 		(4 ciclos)
	pula			de los	registros		(4 ciclos)
	puly							(6 ciclos)
	pulx							(5 ciclos)
	rts			Retorno de la rubrutina		(5 ciclos)
*								[TOTAL:29]


*****************************************
*	outchar				*
* ACCA: Carácter a enviar		*
* ACCB: Posición	(0-3)		*
*****************************************
outchar	equ	*
	stab	PORTCL	;set the position
	staa	PORTB	;set the character
	rts

*****************************************
*	initdis				*
* Inicia el display			*
*****************************************

initdis	equ	*
	psha
	ldaa	#$FF	;set for output
	staa	DDRC	;C output
	ldaa	PIOC	;get current value
	anda	#$FE	;reset bit 0 to 0
	staa	PIOC	;send it out
	pula
	rts



*********************************************************
*							*
*	VARIABLES Y CONSTANTES GLOBALES DE MEMORIA	*
*							*
*********************************************************

	ORG	$0100
lcd_str	RMB	4	;reservo espacio para el vector usado por el display como VARIABLE GLOBAL


mensaje	FCC	'BUEN DIA'	;mensaje a mostrar
	FCB	0		;coloco el terminador nulo


*****************************************
*	STACK DATA			*
*****************************************

	ORG	$3000
stack	RMB	50
stk_ini	EQU	*-1



	END